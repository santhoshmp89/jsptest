/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main/DataWrapper.ts":
/*!*********************************!*\
  !*** ./src/main/DataWrapper.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar DataWrapper = /** @class */ (function () {\n    function DataWrapper() {\n        // insight\n        this.hasErrors = false;\n        this._appErrors = null;\n        this.hasIndicators = false;\n        this._indicators = null;\n        this.hasTracepoints = false;\n        this._tracepoints = null;\n    }\n    DataWrapper.prototype.addError = function (key, value) {\n        if (!this.hasErrors) {\n            this._appErrors = new Object();\n            this.hasErrors = true;\n        }\n        this._appErrors[key] = value;\n    };\n    DataWrapper.prototype.getErrors = function () {\n        return this._appErrors;\n    };\n    DataWrapper.prototype.addIndicator = function (obj) {\n        if (!this.hasIndicators) {\n            this._indicators = {};\n            this.hasIndicators = true;\n        }\n        for (var key in obj) {\n            this._indicators[key] = obj[key];\n        }\n    };\n    DataWrapper.prototype.getIndicators = function () {\n        return this._indicators;\n    };\n    DataWrapper.prototype.addTracepoint = function (obj) {\n        if (!this.hasTracepoints) {\n            this._tracepoints = {};\n            this.hasTracepoints = true;\n        }\n        for (var key in obj) {\n            this._tracepoints[key] = obj[key];\n        }\n    };\n    DataWrapper.prototype.getTracepoints = function () {\n        return this._tracepoints;\n    };\n    return DataWrapper;\n}());\nexports[\"default\"] = DataWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi9EYXRhV3JhcHBlci50cyIsIm1hcHBpbmdzIjoiOztBQUlBO0lBQUE7UUFpRUksVUFBVTtRQUNWLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDVixlQUFVLEdBQVcsSUFBSSxDQUFDO1FBY2xDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2QsZ0JBQVcsR0FBOEIsSUFBSSxDQUFDO1FBZXRELG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ2YsaUJBQVksR0FBOEIsSUFBSSxDQUFDO0lBa0IzRCxDQUFDO0lBaERHLDhCQUFRLEdBQVIsVUFBUyxHQUFHLEVBQUUsS0FBSztRQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQzFCLENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsK0JBQVMsR0FBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBSUQsa0NBQVksR0FBWixVQUFhLEdBQThCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDOUIsQ0FBQztRQUVELEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsQ0FBQztJQUNMLENBQUM7SUFDRCxtQ0FBYSxHQUFiO1FBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFJRCxtQ0FBYSxHQUFiLFVBQWMsR0FBOEI7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMvQixDQUFDO1FBRUQsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxDQUFDO0lBQ0wsQ0FBQztJQUNELG9DQUFjLEdBQWQ7UUFDSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUtMLGtCQUFDO0FBQUQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NhdGNoUG9pbnQuSGF3ay5Gcm9udEVuZC5KYXZhU2NyaXB0UHJvdmlkZXIuTGlicmFyeS8uL3NyYy9tYWluL0RhdGFXcmFwcGVyLnRzP2MyZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb2ZpbGVySnNFcnJvciBmcm9tICcuLi9ycHJvZmlsZXIvUHJvZmlsZXJKc0Vycm9yJztcclxuaW1wb3J0IHsgUG9zdFR5cGUgfSBmcm9tICcuLi90eXBlcyc7XHJcbmltcG9ydCBBamF4VGltaW5nIGZyb20gJy4uL3Jwcm9maWxlci9BamF4VGltaW5nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFXcmFwcGVyIHtcclxuICAgIHBvc3RUeXBlOiBQb3N0VHlwZTtcclxuICAgIHJlZmVycmVyOiBzdHJpbmc7XHJcbiAgICBzaXRlSWQ6IG51bWJlcjtcclxuICAgIHZlcnNpb246IG51bWJlcjtcclxuICAgIHVzZXJJZDogbnVtYmVyO1xyXG4gICAgc2Vzc2lvbklkOiBudW1iZXI7XHJcbiAgICBwYWdlVmlld0lkOiBudW1iZXI7XHJcbiAgICBwYWdlVmlld0NvdW50OiBudW1iZXI7XHJcbiAgICB2aWV3Q291bnQ6IG51bWJlcjtcclxuICAgIHByZXJlbmRlcjogbnVtYmVyO1xyXG4gICAgaXNOZXdQYWdlVmlldzogYm9vbGVhbjtcclxuICAgIGlzTmV3VmlldzogYm9vbGVhbjtcclxuXHJcbiAgICBkbnM6IG51bWJlcjtcclxuICAgIGZ1bGxDb25uZWN0OiBudW1iZXI7XHJcbiAgICB3YWl0OiBudW1iZXI7XHJcbiAgICBsb2FkOiBudW1iZXI7XHJcbiAgICBkb21JbnRlcmFjdGl2ZTogbnVtYmVyO1xyXG4gICAgZG9tTG9hZGVkOiBudW1iZXI7XHJcbiAgICBkb2NDb21wbGV0ZTogbnVtYmVyO1xyXG4gICAgcmVzcG9uc2U6IG51bWJlcjtcclxuICAgIGNvbnRlbnRMb2FkOiBudW1iZXI7XHJcbiAgICByZWRpcmVjdDogbnVtYmVyO1xyXG5cclxuICAgIHNlY3VyZUNvbm5lY3Q6IG51bWJlcjtcclxuICAgIHJlZGlyZWN0Q291bnQ6IG51bWJlcjtcclxuXHJcbiAgICBqc0Vycm9yQ291bnQ6IG51bWJlcjtcclxuICAgIGpzRXJyb3JzOiBQcm9maWxlckpzRXJyb3JbXTtcclxuXHJcbiAgICBzY3JlZW5IZWlnaHQ6IG51bWJlcjtcclxuICAgIHNjcmVlbldpZHRoOiBudW1iZXI7XHJcblxyXG4gICAgZXhpdFRvRW50cnk6IG51bWJlcjtcclxuICAgIGVudHJ5VG9PbkxvYWQ6IG51bWJlcjtcclxuXHJcbiAgICBwYWdlR3JvdXA6IHN0cmluZztcclxuICAgIHZhcmlhdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIGlzQ29udmVyc2lvbjogYm9vbGVhbjtcclxuICAgIHJldmVudWU6IG51bWJlcjtcclxuICAgIHJldmVudWVJdGVtczogbnVtYmVyO1xyXG5cclxuICAgIHNhbXBsZVJhdGU6IG51bWJlcjtcclxuICAgIHdhdGVyZmFsbFNhbXBsZVJhdGU6IG51bWJlcjtcclxuXHJcbiAgICBmaXJzdFBhaW50OiBudW1iZXI7XHJcbiAgICBmaXJzdENvbnRlbnRQYWludDogbnVtYmVyO1xyXG4gICAgdGltZU9uUGFnZTogbnVtYmVyO1xyXG4gICAgZW5nYWdlbWVudFRpbWU6IG51bWJlcjtcclxuICAgIGZpcnN0RW5nYWdlbWVudFRpbWU6IG51bWJlcjtcclxuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3VzZXItdGltaW5nLyNkb20tcGVyZm9ybWFuY2UtbWFyayBmb3IgaW5mbyBvbiBtYXJrKiBwcm9wZXJ0aWVzLlxyXG4gICAgbWFya0Z1bGx5TG9hZGVkOiBudW1iZXI7XHJcbiAgICBtYXJrRnVsbHlWaXNpYmxlOiBudW1iZXI7XHJcbiAgICBtYXJrQWJvdmVUaGVGb2xkOiBudW1iZXI7XHJcbiAgICBtYXJrVGltZVRvVXNlckFjdGlvbjogbnVtYmVyO1xyXG4gICAgdGltZVRvSW50ZXJhY3Q6IG51bWJlcjtcclxuICAgIHZpc0NvbXBsZXRlOiBudW1iZXI7XHJcbiAgICBmaXJzdElucHV0RGVsYXk6IG51bWJlcjtcclxuICAgIGNsczogbnVtYmVyO1xyXG4gICAgbGNwOiBudW1iZXI7XHJcbiAgICBpbnA6IG51bWJlcjtcclxuXHJcbiAgICAvLyBpbnNpZ2h0XHJcbiAgICBoYXNFcnJvcnMgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2FwcEVycm9yczogT2JqZWN0ID0gbnVsbDtcclxuICAgIGFkZEVycm9yKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FwcEVycm9ycyA9IG5ldyBPYmplY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5oYXNFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXBwRXJyb3JzW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFcnJvcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcEVycm9ycztcclxuICAgIH1cclxuXHJcbiAgICBoYXNJbmRpY2F0b3JzID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9pbmRpY2F0b3JzOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0gbnVsbDtcclxuICAgIGFkZEluZGljYXRvcihvYmo6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0pIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzSW5kaWNhdG9ycykge1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3JzID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuaGFzSW5kaWNhdG9ycyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvcnNba2V5XSA9IG9ialtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldEluZGljYXRvcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGljYXRvcnM7XHJcbiAgICB9XHJcblxyXG4gICAgaGFzVHJhY2Vwb2ludHMgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3RyYWNlcG9pbnRzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0gbnVsbDtcclxuICAgIGFkZFRyYWNlcG9pbnQob2JqOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc1RyYWNlcG9pbnRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlcG9pbnRzID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuaGFzVHJhY2Vwb2ludHMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICB0aGlzLl90cmFjZXBvaW50c1trZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0VHJhY2Vwb2ludHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNlcG9pbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlcXVlc3RzXHJcbiAgICByZXNvdXJjZXM6IFBlcmZvcm1hbmNlUmVzb3VyY2VUaW1pbmdbXTtcclxuICAgIGFqYXhSZXF1ZXN0czogQWpheFRpbWluZ1tdO1xyXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/DataWrapper.ts\n");

/***/ }),

/***/ "./src/main/main.ts":
/*!**************************!*\
  !*** ./src/main/main.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar types_1 = __webpack_require__(/*! ../types */ \"./src/types.ts\");\nvar DataWrapper_1 = __importDefault(__webpack_require__(/*! ./DataWrapper */ \"./src/main/DataWrapper.ts\"));\n(function () {\n    if (!document.getElementById || !(window[\"attachEvent\"] || window.addEventListener)) {\n        return;\n    }\n    var pageWindow = parent.window;\n    var location = pageWindow.location;\n    var profiler = pageWindow[\"RProfiler\"];\n    var windowEvent = pageWindow[\"WindowEvent\"];\n    var protocol = location.protocol + \"//\";\n    if (!windowEvent || !profiler) {\n        return;\n    }\n    var hasPerformanceApi = !!pageWindow.performance && typeof pageWindow.performance === \"object\";\n    var hasGetEntriesApi = hasPerformanceApi &&\n        typeof pageWindow.performance.getEntriesByType === \"function\";\n    // extend WindowEvent enum definition\n    var windowEventDef = {\n        Load: windowEvent.Load,\n        BeforeUnload: windowEvent.BeforeUnload,\n        Unload: windowEvent.Unload,\n        Abort: windowEvent.Abort,\n        Error: windowEvent.Error\n    };\n    // variable values replaced in code behind\n    var testUserId = 123;\n    // const version: string = \"{{version}}\";\n    var version = \"v3.3.11\";\n    var config = {\n        sampleRate: -999, // range [0 - 100]\n        waterfallSampleRate: -888, // range [0 - 100]\n        // postUrl: protocol + \"{{postUrl}}\",\n        postUrl: protocol + \"lst01a.3genlabs.net/hawklogserver/r.p\",\n        siteId: -111,\n        // debugParameter: \"{{debugParam}}\",\n        debugParameter: \"GlimpseDebug\",\n        // debugUrl: \"{{debugUrl}}\",\n        debugUrl: \"portalstage.catchpoint.com/jp/v3.3.11/D\",\n        // waterfallParameter: \"{{wfallParam}}\",\n        waterfallParameter: \"GlimpseWaterfall\",\n        sendOnLoad: false, // default is send onunload\n        clearResources: true, // clear performance entries when we send data to core. using performance.clearResourceTimings()\n        // ajaxDomains: \"{{ajaxDomains}}\"\n        ajaxDomains: \"\"\n    };\n    var now = function () {\n        return (new Date()).getTime();\n    };\n    if (!!pageWindow[\"__cpPostUrl\"]) {\n        config.postUrl = pageWindow[\"__cpPostUrl\"].trim();\n    }\n    if (!!pageWindow[\"__cpSendOnLoad\"]) {\n        config.sendOnLoad = pageWindow[\"__cpSendOnLoad\"] === true;\n    }\n    // TTI is calculated using https://github.com/WICG/time-to-interactive#definition    \n    var Storage = /** @class */ (function () {\n        function Storage() {\n        }\n        Storage.save = function (value) {\n            if (Storage.canUseLocalStorage()) {\n                pageWindow.localStorage.setItem(Storage.storeKey, value);\n                return;\n            }\n            Storage.setCookie(value);\n        };\n        Storage.read = function () {\n            if (Storage.canUseLocalStorage()) {\n                var store = pageWindow.localStorage.getItem(Storage.storeKey);\n                if (store) {\n                    return store;\n                }\n            }\n            return this.readCookie();\n        };\n        Storage.canUseLocalStorage = function () {\n            var canUse = true;\n            try {\n                var key = Storage.storeKey + 'delete';\n                var value = key + 0;\n                pageWindow.localStorage.setItem(key, value);\n                var valueFromStorage = pageWindow.localStorage.getItem(key);\n                canUse = value === valueFromStorage;\n                if (canUse) {\n                    pageWindow.localStorage.removeItem(key);\n                }\n            }\n            catch (ex) {\n                canUse = false;\n            }\n            return canUse;\n        };\n        Storage.setCookie = function (value) {\n            var date = new Date();\n            date.setTime(date.getTime() + (Storage.cookieExpireDays * 24 * 60 * 60 * 1000));\n            var expires = '; expires=' + date.toUTCString();\n            var split = pageWindow.document.domain.split('.');\n            var length = split.length;\n            var domain = split[length - 2] + '.' + split[length - 1];\n            document.cookie = Storage.storeKey + '=' + encodeURIComponent(value) + expires + '; path=/; domain=' + domain + '; SameSite=Lax;';\n        };\n        Storage.readCookie = function () {\n            var split = pageWindow.document.cookie.split(';');\n            var regex = Storage.storeRegex;\n            for (var _i = 0, split_1 = split; _i < split_1.length; _i++) {\n                var c = split_1[_i];\n                if (regex.test(c)) {\n                    return decodeURIComponent(c.substring(c.indexOf('=') + 1, c.length));\n                }\n            }\n            return '';\n        };\n        Storage.cookieExpireDays = 365;\n        Storage.storeKey = \"{{cookieName}}\";\n        Storage.storeRegex = new RegExp(\"^(\\\\s)*\" + Storage.storeKey + \"=\", \"i\");\n        return Storage;\n    }());\n    var Util = /** @class */ (function () {\n        function Util() {\n        }\n        Util.getValue = function (resource, metric) {\n            var allowOrigin = resource.responseStart !== 0;\n            switch (metric) {\n                case Metrics.DNS: return Util.getMetricValue(resource.domainLookupEnd, resource.domainLookupStart, allowOrigin);\n                case Metrics.Connect: return Util.getMetricValue(resource.connectEnd, resource.connectStart, allowOrigin);\n                case Metrics.Load: return Util.getMetricValue(resource.responseEnd, resource.responseStart, allowOrigin);\n                case Metrics.Wait: return Util.getMetricValue(resource.responseStart, resource.requestStart, allowOrigin);\n                case Metrics.Start: return resource.startTime;\n                case Metrics.Redirect: return Util.getMetricValue(resource.redirectEnd, resource.redirectStart);\n                case Metrics.Duration: return resource.duration;\n                case Metrics.SSL:\n                    if (resource[\"secureConnectionStart\"]) {\n                        return allowOrigin ? resource.connectEnd - resource[\"secureConnectionStart\"] : null;\n                    }\n                    break;\n            }\n            return 0;\n        };\n        Util.getMetricValue = function (end, start, allowOrigin) {\n            if (allowOrigin === void 0) { allowOrigin = true; }\n            if (!allowOrigin) {\n                return null;\n            }\n            else if (end >= 0 && end >= start && start >= 0) {\n                var value = end - start;\n                return Math.round(value);\n            }\n        };\n        Util.getRoundedValue = function (value) {\n            return value ? Math.round(value) : value;\n        };\n        Util.addScriptTag = function (url, scope) {\n            var script = scope.document.createElement(\"script\");\n            script.type = \"text/javascript\";\n            script.src = protocol + url;\n            scope.document.body.appendChild(script);\n        };\n        Util.getQueryStringValue = function (val) {\n            var query = location.search.substring(1);\n            var values = query.split(\"&\");\n            var arr;\n            for (var i = 0; i < values.length; i++) {\n                arr = values[i].split(\"=\");\n                if (arr[0] == val) {\n                    return arr[1];\n                }\n            }\n            return \"\";\n        };\n        Util.stopEvents = function () {\n            if (!profiler) {\n                return;\n            }\n            profiler.eventManager.clear();\n            profiler.getEventTimingHandler().clear();\n        };\n        Util.getNavigationTime = function () {\n            var timing = null;\n            var navigationTime = hasGetEntriesApi && pageWindow.performance.getEntriesByType('navigation');\n            if (navigationTime && navigationTime.length !== 0) {\n                timing = navigationTime[0];\n            }\n            return timing;\n        };\n        Util.getNavigationStart = function (timing) {\n            var navigationtiming = timing;\n            return navigationtiming.startTime;\n        };\n        return Util;\n    }());\n    var PerformanceObserver = /** @class */ (function () {\n        function PerformanceObserver(isSoftnav) {\n            var _this = this;\n            this.longTaskEndTime = 0;\n            this.waitTime = 5000;\n            this.performanceObserverApi = pageWindow['PerformanceObserver'];\n            this.performanceLongTaskTiming = pageWindow['PerformanceLongTaskTiming'];\n            this.nowTime = 0;\n            this.isSoftnav = false;\n            this.getDomContentLoad = function () {\n                var timing = Util.getNavigationTime();\n                if (timing) {\n                    var navStart = Util.getNavigationStart(timing);\n                    var domContentLoad = Util.getMetricValue(timing.domContentLoadedEventEnd, navStart);\n                    return domContentLoad;\n                }\n            };\n            this.observeLongTask = function (entries) {\n                for (var i = 0; i < entries.length; i++) {\n                    var currEntry = entries[i];\n                    var startTime = _this.isSoftnav ? currEntry.startTime - _this.nowTime : currEntry.startTime;\n                    var idleTimeBetweenLongTasks = startTime - _this.longTaskEndTime;\n                    if (idleTimeBetweenLongTasks >= _this.waitTime) {\n                        _this.performanceObserver.disconnect();\n                    }\n                    else {\n                        _this.setLongTaskTime(currEntry);\n                    }\n                }\n            };\n            this.setLongTaskTime = function (entry) {\n                var newLongTaskTime = Math.round(entry.startTime + entry.duration);\n                _this.longTaskEndTime = newLongTaskTime;\n            };\n            this.getLongTaskTime = function () {\n                return _this.longTaskEndTime;\n            };\n            if (this.performanceLongTaskTiming) {\n                // setting default TTI as domContentLoad on Load (not soft navigation).\n                this.isSoftnav = isSoftnav;\n                this.nowTime = pageWindow.performance.now();\n                var domContentLoad = this.getDomContentLoad();\n                if (!isSoftnav) {\n                    this.longTaskEndTime = domContentLoad;\n                }\n                this.observe([\"longtask\"], this.observeLongTask);\n            }\n        }\n        PerformanceObserver.prototype.observe = function (entryTypes, callBack) {\n            if (this.performanceObserverApi) {\n                // @ts-ignore\n                this.performanceObserver = new this.performanceObserverApi(function (list, obj) {\n                    var entries = list.getEntries();\n                    callBack(entries);\n                });\n                this.performanceObserver.observe({ entryTypes: entryTypes });\n            }\n        };\n        return PerformanceObserver;\n    }());\n    var CookieIdentifier;\n    (function (CookieIdentifier) {\n        CookieIdentifier[\"UserId\"] = \"u\";\n        CookieIdentifier[\"SessionId\"] = \"s\";\n        CookieIdentifier[\"SessionTime\"] = \"t\";\n        CookieIdentifier[\"PageViewCount\"] = \"c\";\n        CookieIdentifier[\"UrlCheckSum\"] = \"k\";\n        CookieIdentifier[\"PostFlag\"] = \"f\";\n    })(CookieIdentifier || (CookieIdentifier = {}));\n    // defined in CP.Common.Interfaces\n    var WinHttpMethod;\n    (function (WinHttpMethod) {\n        WinHttpMethod[WinHttpMethod[\"GET\"] = 0] = \"GET\";\n        WinHttpMethod[WinHttpMethod[\"POST\"] = 1] = \"POST\";\n        WinHttpMethod[WinHttpMethod[\"HEAD\"] = 2] = \"HEAD\";\n        WinHttpMethod[WinHttpMethod[\"DELETE\"] = 3] = \"DELETE\";\n        WinHttpMethod[WinHttpMethod[\"OPTIONS\"] = 4] = \"OPTIONS\";\n        WinHttpMethod[WinHttpMethod[\"PUT\"] = 5] = \"PUT\";\n        WinHttpMethod[WinHttpMethod[\"TRACE\"] = 6] = \"TRACE\";\n        WinHttpMethod[WinHttpMethod[\"CONNECT\"] = 7] = \"CONNECT\";\n    })(WinHttpMethod || (WinHttpMethod = {}));\n    var Metrics;\n    (function (Metrics) {\n        Metrics[Metrics[\"DNS\"] = 0] = \"DNS\";\n        Metrics[Metrics[\"Connect\"] = 1] = \"Connect\";\n        Metrics[Metrics[\"Load\"] = 2] = \"Load\";\n        Metrics[Metrics[\"Wait\"] = 3] = \"Wait\";\n        Metrics[Metrics[\"Start\"] = 4] = \"Start\";\n        Metrics[Metrics[\"Redirect\"] = 5] = \"Redirect\";\n        Metrics[Metrics[\"Duration\"] = 6] = \"Duration\";\n        Metrics[Metrics[\"SSL\"] = 7] = \"SSL\";\n    })(Metrics || (Metrics = {}));\n    var VisitorStorage = /** @class */ (function () {\n        function VisitorStorage() {\n            this.userId = -1;\n            this.sessionId = 0;\n            this.sessionTime = 0;\n            this.pageViewCount = 0;\n            this.viewCount = 0;\n            this.pageViewId = 0;\n            this.postFlag = -1;\n            this.sendWaterfall = false;\n            this.exitToEntry = 0;\n        }\n        VisitorStorage.prototype.resetViewCount = function () {\n            this.viewCount = 1;\n        };\n        VisitorStorage.prototype.save = function () {\n            var text = this.getText();\n            Storage.save(text);\n        };\n        VisitorStorage.prototype.load = function () {\n            var storeValue = Storage.read();\n            if (!storeValue) {\n                return false;\n            }\n            var split = storeValue.split(',');\n            for (var _i = 0, split_2 = split; _i < split_2.length; _i++) {\n                var visitorVal = split_2[_i];\n                var array = visitorVal.split(':');\n                if (array.length !== 2) {\n                    continue;\n                }\n                var key = array[0];\n                if (typeof key === \"string\") {\n                    key = key.trim();\n                }\n                var value = array[1];\n                if (key === CookieIdentifier.UrlCheckSum) {\n                    this.urlCheckSum = value;\n                    continue;\n                }\n                var num = parseInt(array[1], 10);\n                if (isNaN(num)) {\n                    continue;\n                }\n                switch (key) {\n                    case CookieIdentifier.UserId:\n                        this.userId = num;\n                        break;\n                    case CookieIdentifier.SessionId:\n                        this.sessionId = num;\n                        break;\n                    case CookieIdentifier.SessionTime:\n                        this.sessionTime = num;\n                        break;\n                    case CookieIdentifier.PageViewCount:\n                        this.pageViewCount = num;\n                        break;\n                    case CookieIdentifier.PostFlag:\n                        this.postFlag = num;\n                        break;\n                }\n            }\n            return true;\n        };\n        VisitorStorage.prototype.getText = function () {\n            var text = CookieIdentifier.UserId + \":\" + this.userId + \",\";\n            text += CookieIdentifier.SessionId + \":\" + this.sessionId + \",\";\n            text += CookieIdentifier.SessionTime + \":\" + this.sessionTime + \",\";\n            text += CookieIdentifier.PageViewCount + \":\" + this.pageViewCount + \",\";\n            text += CookieIdentifier.UrlCheckSum + \":\" + this.urlCheckSum + \",\";\n            text += CookieIdentifier.PostFlag + \":\" + this.postFlag;\n            return text;\n        };\n        return VisitorStorage;\n    }());\n    var Visitor = /** @class */ (function () {\n        function Visitor() {\n            this.sessionExpire = 30 * 60 * 1000;\n            this.store = new VisitorStorage();\n        }\n        Visitor.prototype.updateSessionTime = function () {\n            if (!this.store) {\n                return;\n            }\n            var time = (new Date()).getTime();\n            if (time - this.store.sessionTime > this.sessionExpire) {\n                this.store.sessionId = 0;\n            }\n            this.store.sessionTime = time;\n            this.updateStore();\n        };\n        Visitor.prototype.updateStore = function () {\n            if (!this.store) {\n                return;\n            }\n            this.store.save();\n        };\n        Visitor.prototype.initStore = function () {\n            var hasStoredValue = this.store.load();\n            if (!hasStoredValue) {\n                return;\n            }\n        };\n        Visitor.prototype.checkAndResetPostFlags = function () {\n            this.store.postFlag = 0;\n            if (config.sampleRate < 0) {\n                this.store.postFlag = -1;\n                return;\n            }\n            var rate = this.getUserId(config.sampleRate / 100);\n            if (this.store.userId <= rate) {\n                this.store.postFlag = 1;\n                var waterfallRate = rate / (100 / config.waterfallSampleRate);\n                this.store.sendWaterfall = (this.store.userId <= waterfallRate);\n            }\n        };\n        Visitor.prototype.getReferrer = function (url) {\n            var host = this.getHostName(url).replace(\":\", \"-\");\n            var index = url.indexOf(\"?\");\n            var n = 0;\n            for (var i = host.length; i < url.length; i++) {\n                n += (url.charCodeAt(i) % i);\n            }\n            return host + \"/\" + ((index < 0) ? url.length : index) + \"/\" + url.length + \"/\" + n;\n        };\n        Visitor.prototype.getHostName = function (url) {\n            var start = url.indexOf(\"//\") + 2;\n            var end = url.indexOf(\"/\", start);\n            if (start < 2 && end == -1) {\n                return url;\n            }\n            if (end == -1) {\n                end = url.length;\n            }\n            return url.substring(start, end);\n        };\n        Visitor.prototype.init = function () {\n            var start = profiler.data.start;\n            this.initStore();\n            if (this.store.userId == -1 || this.store.userId == testUserId) {\n                this.store.userId = this.getUserId();\n            }\n            this.checkAndResetPostFlags();\n            if (this.store.sessionId == 0 || (start - this.store.sessionTime > this.sessionExpire)) {\n                this.store.sessionId = Math.floor(1 + (Math.random() * ((Math.pow(2, 32) - 2) / 2)));\n                this.store.pageViewCount = 1;\n            }\n            else {\n                if (this.store.pageViewCount < 65535) {\n                    this.store.pageViewCount++;\n                }\n                if (this.getReferrer(pageWindow.document.referrer) == this.store.urlCheckSum && this.store.sessionTime > 0) {\n                    this.store.exitToEntry = start - this.store.sessionTime;\n                }\n            }\n            this.store.sessionTime = (new Date()).getTime();\n            this.store.pageViewId = Math.floor(1 + (Math.random() * ((Math.pow(2, 16) - 2) / 2)));\n            this.store.urlCheckSum = this.getReferrer(pageWindow.location.href);\n            this.store.resetViewCount();\n            this.updateStore();\n            var hasVisitorData = this.store.load();\n            return hasVisitorData;\n        };\n        //This method is used for 2 purpose\n        // 1. When the userId is -1 (no id assigned for user), user id is created randomly. So method is called without a param\n        // 2. A seed is used when we sample the user and sample rate is passed as param in that case.\n        // This logic for sampling is happening in Core as well. Any changes in this method should be approved by Core as well.\n        Visitor.prototype.getUserId = function (seed) {\n            if (seed === void 0) { seed = Math.random(); }\n            var userId = Math.floor(1 + (seed * ((Math.pow(2, 64) - 2) / 2)));\n            return userId;\n        };\n        Visitor.prototype.shouldPost = function () {\n            return this.store.postFlag == 1;\n        };\n        return Visitor;\n    }());\n    var TreeNode = /** @class */ (function () {\n        function TreeNode(char) {\n            this.char = char;\n            this.children = [];\n        }\n        return TreeNode;\n    }());\n    var Tree = /** @class */ (function () {\n        function Tree() {\n            this.root = new TreeNode(\"\");\n            this.isReversed = true;\n        }\n        Tree.prototype.add = function (parent, char) {\n            if (parent === void 0) { parent = this.root; }\n            var children = parent.children;\n            for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                var child = children_1[_i];\n                if (child.char == char) {\n                    return child;\n                }\n            }\n            var node = new TreeNode(char);\n            children.push(node);\n            node.parent = parent;\n            return node;\n        };\n        Tree.prototype.toObject = function () {\n            var obj = {};\n            var isSuffix = this.isReversed;\n            (function recurse(curr, obj) {\n                var isRoot = curr.char == \"\";\n                var arg;\n                if (isRoot) {\n                    arg = obj;\n                }\n                else {\n                    var key = curr.char;\n                    if (curr.children.length == 1) {\n                        while (curr.children.length == 1) {\n                            curr = curr.children[0];\n                            key = isSuffix ? curr.char + key : key + curr.char;\n                            if (curr.data) {\n                                obj[key] = curr.data;\n                            }\n                        }\n                    }\n                    obj[key] = curr.data || {};\n                    arg = obj[key];\n                }\n                for (var i = 0; i < curr.children.length; i++) {\n                    recurse(curr.children[i], arg);\n                }\n            })(this.root, obj);\n            return obj;\n        };\n        return Tree;\n    }());\n    var performanceObserver = new PerformanceObserver(false);\n    var WaterfallItem = /** @class */ (function () {\n        function WaterfallItem(resource) {\n            this.dns = null;\n            this.connect = null;\n            this.load = null;\n            this.wait = null;\n            this.start = 0;\n            this.duration = 0;\n            this.redirect = 0;\n            this.ssl = null;\n            this.url = resource.name;\n            var func = Util.getValue;\n            this.dns = func(resource, Metrics.DNS);\n            this.connect = func(resource, Metrics.Connect);\n            this.wait = func(resource, Metrics.Wait);\n            this.load = func(resource, Metrics.Load);\n            this.start = func(resource, Metrics.Start);\n            this.duration = func(resource, Metrics.Duration);\n            this.redirect = func(resource, Metrics.Redirect);\n            this.ssl = func(resource, Metrics.SSL);\n        }\n        Object.defineProperty(WaterfallItem.prototype, \"url\", {\n            get: function () {\n                return this._url;\n            },\n            set: function (u) {\n                if (u.indexOf(\"http://\") !== -1) {\n                    this.protocol = 0;\n                }\n                else if (u.indexOf(\"https://\") !== -1) {\n                    this.protocol = 1;\n                }\n                var host = u.split(\"/\").slice(1, 3).join(\"\");\n                var index = host.indexOf(\":\");\n                if (index != -1) {\n                    var p = host.substr(index + 1);\n                    var num = parseInt(p);\n                    if (!isNaN(num)) {\n                        this.port = num;\n                    }\n                }\n                u = u.substr(u.indexOf(host) + host.length);\n                index = u.indexOf(\"?\");\n                if (index != -1) {\n                    u = u.substr(0, index);\n                }\n                index = u.indexOf(\"#\");\n                if (index != -1) {\n                    u = u.substr(0, index);\n                }\n                u = u.substr(0, 64);\n                this._url = u;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        WaterfallItem.prototype.translateForPost = function () {\n            // @ts-ignore\n            var round = Math.round;\n            var roundedValue = Util.getRoundedValue;\n            var obj = {\n                u: this.url,\n                pr: this.protocol\n            };\n            var setIfNumber = function (key, num) {\n                if (typeof num == \"number\" && !isNaN(num)) {\n                    obj[key] = num;\n                }\n            };\n            setIfNumber(\"pt\", this.port);\n            setIfNumber(\"dn\", roundedValue(this.dns));\n            setIfNumber(\"fc\", roundedValue(this.connect));\n            setIfNumber(\"ld\", roundedValue(this.load));\n            setIfNumber(\"wt\", roundedValue(this.wait));\n            setIfNumber(\"st\", roundedValue(this.start));\n            setIfNumber(\"rd\", roundedValue(this.redirect));\n            setIfNumber(\"dr\", roundedValue(this.duration));\n            setIfNumber(\"ssl\", roundedValue(this.ssl));\n            return obj;\n        };\n        return WaterfallItem;\n    }());\n    var AjaxItem = /** @class */ (function (_super) {\n        __extends(AjaxItem, _super);\n        function AjaxItem(timing, resource, isSummary) {\n            var _this = _super.call(this, resource) || this;\n            _this.responseTime = 0; // calculated from readyState changes\n            _this.sendSize = 0;\n            _this.responseSize = 0;\n            _this.method = WinHttpMethod[timing.method.toUpperCase()];\n            if (timing.complete && timing.connectionEstablished) {\n                _this.responseTime = timing.complete - timing.connectionEstablished;\n            }\n            _this.isSummary = isSummary;\n            if (isSummary) {\n                _this.start = undefined; // summary items should not have start time\n                _this.count = 1;\n            }\n            else {\n                _this.isAsync = timing.isAsync;\n            }\n            _this.sendSize = timing.sendSize || 0;\n            _this.responseSize = timing.responseSize || 0;\n            return _this;\n        }\n        AjaxItem.prototype.update = function (timing, resource) {\n            var func = Util.getValue;\n            if (resource.responseStart) {\n                this.dns += func(resource, Metrics.DNS);\n                this.connect += func(resource, Metrics.Connect);\n                this.wait += func(resource, Metrics.Wait);\n                this.load += func(resource, Metrics.Load);\n                this.ssl += func(resource, Metrics.SSL);\n            }\n            this.duration += func(resource, Metrics.Duration);\n            this.redirect += func(resource, Metrics.Redirect);\n            this.sendSize += (timing.sendSize || 0);\n            this.responseSize += (timing.responseSize || 0);\n            this.count++;\n        };\n        AjaxItem.prototype.translateForPost = function () {\n            var obj = _super.prototype.translateForPost.call(this);\n            if (this.isSummary) {\n                obj[\"n\"] = this.count;\n            }\n            else {\n                obj[\"ia\"] = (this.isAsync ? 1 : 0);\n            }\n            obj[\"md\"] = this.method;\n            obj[\"rp\"] = Math.round(this.responseTime);\n            obj[\"ss\"] = this.sendSize;\n            obj[\"rs\"] = this.responseSize;\n            return obj;\n        };\n        return AjaxItem;\n    }(WaterfallItem));\n    var HostSummary = /** @class */ (function () {\n        function HostSummary() {\n            this.count = 0;\n            this.dns = null;\n            this.connect = null;\n            this.load = null;\n            this.wait = null;\n            this.duration = 0;\n            this.redirect = 0;\n            this.ssl = null;\n        }\n        HostSummary.prototype.addAjaxItem = function (timing, resource) {\n            this.update(resource);\n            var ajax = new AjaxItem(timing, resource, true);\n            if (typeof this._ajax == \"undefined\") {\n                this._ajax = [];\n                this._ajax.push(ajax);\n                return;\n            }\n            for (var _i = 0, _a = this._ajax; _i < _a.length; _i++) {\n                var a = _a[_i];\n                if (a.url == ajax.url) {\n                    a.update(timing, resource);\n                    return;\n                }\n            }\n            if (this._ajax.length < 10) {\n                this._ajax.push(ajax);\n            }\n        };\n        HostSummary.prototype.update = function (resource) {\n            var func = Util.getValue;\n            if (resource.responseStart) {\n                this.dns += func(resource, Metrics.DNS);\n                this.connect += func(resource, Metrics.Connect);\n                this.wait += func(resource, Metrics.Wait);\n                this.load += func(resource, Metrics.Load);\n                this.ssl += func(resource, Metrics.SSL);\n            }\n            this.duration += func(resource, Metrics.Duration);\n            this.redirect += func(resource, Metrics.Redirect);\n            this.count++;\n        };\n        HostSummary.prototype.translateForPost = function () {\n            var roundedValue = Util.getRoundedValue;\n            var obj = {\n                n: this.count,\n                dn: roundedValue(this.dns),\n                fc: roundedValue(this.connect),\n                ld: roundedValue(this.load),\n                wt: roundedValue(this.wait),\n                dr: roundedValue(this.duration),\n                rd: roundedValue(this.redirect),\n                ssl: roundedValue(this.ssl)\n            };\n            if (this._ajax) {\n                var ajax = [];\n                for (var _i = 0, _a = this._ajax; _i < _a.length; _i++) {\n                    var a = _a[_i];\n                    ajax.push(a.translateForPost());\n                }\n                obj[\"ax\"] = ajax;\n            }\n            return obj;\n        };\n        return HostSummary;\n    }());\n    var HostWaterfall = /** @class */ (function () {\n        function HostWaterfall() {\n            this._resources = [];\n        }\n        HostWaterfall.prototype.translateForPost = function () {\n            var a = [];\n            for (var _i = 0, _a = this._resources; _i < _a.length; _i++) {\n                var res = _a[_i];\n                a.push(res.translateForPost());\n            }\n            return a;\n        };\n        HostWaterfall.prototype.addItem = function (resource) {\n            var item = new WaterfallItem(resource);\n            this._resources.push(item);\n        };\n        HostWaterfall.prototype.addAjaxItem = function (timing, resource) {\n            var ajax = new AjaxItem(timing, resource, false);\n            this._resources.push(ajax);\n        };\n        return HostWaterfall;\n    }());\n    var PostData = /** @class */ (function (_super) {\n        __extends(PostData, _super);\n        function PostData() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.maxJsErrors = 10;\n            _this.charCodes = {\n                \"\\b\": \"\\\\b\",\n                \"\\t\": \"\\\\t\",\n                \"\\n\": \"\\\\n\",\n                \"\\f\": \"\\\\f\",\n                \"\\r\": \"\\\\r\",\n                '\"': '\\\\\"',\n                \"\\\\\": \"\\\\\\\\\",\n                \"&\": \"%26\"\n            };\n            _this.strRegex = /[\"&\\\\\\x00-\\x1f\\x7f-\\x9f]/g;\n            return _this;\n        }\n        PostData.prototype.toString = function (type, includeWaterfall) {\n            var obj = this.translateForPost(type, includeWaterfall);\n            if (typeof JSON == \"undefined\") {\n                return this.jsonStringify(obj);\n            }\n            return JSON.stringify(obj);\n        };\n        PostData.prototype.strEscape = function (value) {\n            var char = this.charCodes[value];\n            if (char) {\n                return char;\n            }\n            var index = value.charCodeAt(0);\n            return \"\\\\u00\" + Math.floor(index / 16).toString(16) + (index % 16).toString(16);\n        };\n        PostData.prototype.jsonStringify = function (value) {\n            var arr = new Array();\n            switch (typeof value) {\n                case \"string\":\n                    return this.strRegex.test(value) ? '\"' + value.replace(this.strRegex, this.strEscape) + '\"' : '\"' + value + '\"';\n                case \"number\":\n                    return isFinite(value) ? String(value) : \"null\";\n                case \"boolean\":\n                    return String(value);\n                case \"object\":\n                    if (!value) {\n                        return \"null\";\n                    }\n                    if (value.constructor === Date) {\n                    }\n                    if (typeof value.length == \"number\" && !(value.propertyIsEnumerable(\"length\"))) {\n                        for (var _i = 0, _a = value; _i < _a.length; _i++) {\n                            var a = _a[_i];\n                            arr.push(this.jsonStringify(a));\n                        }\n                        return \"[\" + arr.join(\",\") + \"]\";\n                    }\n                    for (var key in value) {\n                        if (typeof key == \"string\") {\n                            var str = this.jsonStringify(value[key]);\n                            if (!!str) {\n                                arr.push(this.jsonStringify(key) + \":\" + str);\n                            }\n                        }\n                    }\n                    return \"{\" + arr.join(\",\") + \"}\";\n            }\n            return \"\";\n        };\n        PostData.prototype.translateForPost = function (type, includeWaterfall) {\n            var isSoftNavigation = this.viewCount > 1;\n            var obj = new Object();\n            obj[\"v\"] = version;\n            obj[\"pt\"] = this.postType;\n            obj[\"ui\"] = this.userId;\n            obj[\"si\"] = this.sessionId;\n            obj[\"di\"] = this.siteId;\n            obj[\"pi\"] = this.pageViewId;\n            obj[\"jsc\"] = this.jsErrorCount || 0;\n            obj[\"rf\"] = this.referrer;\n            obj[\"pc\"] = this.pageViewCount;\n            obj[\"vc\"] = this.viewCount;\n            obj[\"rc\"] = this.redirectCount || 0;\n            if (this.jsErrors && this.jsErrors.length > 0) {\n                var arr = [];\n                for (var i = 0; i < Math.min(this.jsErrors.length, this.maxJsErrors); i++) {\n                    arr.push(this.translateErrorForPost(this.jsErrors[i]));\n                }\n                obj[\"jse\"] = arr;\n            }\n            if (this.hasErrors) {\n                obj[\"ae\"] = this.getErrors();\n            }\n            if (this.pageGroup) {\n                obj[\"pg\"] = this.pageGroup;\n            }\n            if (this.variation) {\n                obj[\"ab\"] = this.variation;\n            }\n            if (this.resources || this.ajaxRequests) {\n                var r = this.translateResources(this.resources, this.ajaxRequests);\n                obj[\"res\"] = r.summary;\n                if (includeWaterfall) {\n                    obj[\"wf\"] = r.waterfall;\n                }\n            }\n            if (typeof this.isNewView == \"boolean\") {\n                obj[\"nv\"] = this.isNewView ? 1 : 0;\n            }\n            if (this.hasIndicators) {\n                obj[\"ind\"] = this.getIndicators();\n            }\n            if (this.hasTracepoints) {\n                obj[\"tra\"] = this.getTracepoints();\n            }\n            if (this.isConversion) {\n                obj[\"cv\"] = this.isConversion ? 1 : 0;\n                if (this.revenue) {\n                    obj[\"rv\"] = this.revenue;\n                }\n                if (this.revenueItems) {\n                    obj[\"ri\"] = this.revenueItems;\n                }\n            }\n            obj[\"np\"] = this.isNewPageView ? 1 : 0;\n            if (type === types_1.PostType.OnLoad || type === types_1.PostType.OnAbort) {\n                obj[\"dh\"] = this.screenHeight;\n                obj[\"dw\"] = this.screenWidth;\n                if (this.isNewPageView) {\n                    obj[\"dn\"] = Math.round(this.dns);\n                    obj[\"fc\"] = Math.round(this.fullConnect);\n                    obj[\"wt\"] = Math.round(this.wait);\n                    obj[\"ld\"] = Math.round(this.load);\n                    obj[\"de\"] = this.domInteractive;\n                    obj[\"dl\"] = this.domLoaded;\n                    obj[\"dc\"] = this.docComplete;\n                    obj[\"rp\"] = this.response;\n                    obj[\"cl\"] = this.contentLoad;\n                    obj[\"rd\"] = this.redirect;\n                    obj[\"rc\"] = this.redirectCount || 0;\n                    obj[\"cls\"] = this.cls;\n                    obj[\"lcp\"] = this.lcp;\n                    obj[\"inp\"] = this.inp;\n                    if (this.secureConnect) {\n                        obj[\"sc\"] = this.secureConnect;\n                    }\n                    if (this.exitToEntry) {\n                        obj[\"xe\"] = this.exitToEntry;\n                    }\n                    if (this.entryToOnLoad) {\n                        obj[\"el\"] = this.entryToOnLoad;\n                    }\n                    if (this.prerender) {\n                        obj[\"pr\"] = this.prerender;\n                    }\n                }\n            }\n            if (type === types_1.PostType.OnBeforeUnload) {\n                obj[\"maf\"] = this.markAboveTheFold;\n                obj[\"mfl\"] = this.markFullyLoaded;\n                obj[\"mfv\"] = this.markFullyVisible;\n                obj[\"mtu\"] = this.markTimeToUserAction;\n                obj[\"tp\"] = this.timeOnPage;\n                obj[\"tti\"] = this.timeToInteract;\n                obj[\"et\"] = this.engagementTime;\n                obj[\"fet\"] = this.firstEngagementTime;\n                obj[\"fid\"] = this.firstInputDelay;\n                obj['vct'] = this.visComplete;\n                obj[\"fid\"] = this.firstInputDelay;\n                if (!isSoftNavigation) {\n                    obj[\"fp\"] = this.firstPaint;\n                    obj[\"fcp\"] = this.firstContentPaint;\n                    obj[\"cls\"] = this.cls;\n                    obj[\"lcp\"] = this.lcp;\n                    obj[\"inp\"] = this.inp;\n                }\n            }\n            return obj;\n        };\n        PostData.prototype.translateErrorForPost = function (error) {\n            var obj = {};\n            obj[\"m\"] = error.message;\n            obj[\"n\"] = error.lineNumber;\n            obj[\"c\"] = error.count + 1; // starts at 0\n            var url = error.url;\n            if (url) {\n                var qStrIndex = url.indexOf(\"?\");\n                if (qStrIndex != -1) {\n                    url = url.substr(0, qStrIndex);\n                }\n            }\n            obj[\"u\"] = url;\n            return obj;\n        };\n        PostData.prototype.translateResources = function (resources, ajaxResources) {\n            var _this = this;\n            var hasResources = !!resources;\n            var hasAjaxResources = !!ajaxResources;\n            if (!hasResources && !hasAjaxResources) {\n                return null;\n            }\n            var getAjaxTiming = function (resource) {\n                if (!hasResources || !hasAjaxResources) {\n                    return null;\n                }\n                var filteredAjaxResources = _this.filterAjaxResources(ajaxResources);\n                for (var _i = 0, filteredAjaxResources_1 = filteredAjaxResources; _i < filteredAjaxResources_1.length; _i++) {\n                    var a = filteredAjaxResources_1[_i];\n                    var url = a.url;\n                    var targetUrl = '';\n                    if (url && url.indexOf(\"http\") != 0) {\n                        var charCount = 0;\n                        var mainUrl = location.href;\n                        for (var i_1 = 0; i_1 < mainUrl.length; i_1++) {\n                            if (mainUrl[i_1] === '/') {\n                                charCount += 1;\n                            }\n                            if (charCount === 3) {\n                                targetUrl = mainUrl.slice(0, i_1);\n                                targetUrl = targetUrl + url;\n                                break;\n                            }\n                        }\n                        if (targetUrl === resource.name) {\n                            return a;\n                        }\n                    }\n                    if (url === resource.name) {\n                        return a;\n                    }\n                }\n                return null;\n            };\n            var hostObj = {};\n            if (resources) {\n                for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n                    var res = resources_1[_i];\n                    if (!res) {\n                        continue;\n                    }\n                    var host = res.name.split(\"/\").slice(1, 3).join(\"\");\n                    if (!host || host.length == 0) {\n                        continue;\n                    }\n                    var portIndex = host.indexOf(\":\");\n                    if (portIndex != -1) {\n                        host = host.substr(0, portIndex);\n                    }\n                    if (!hostObj.hasOwnProperty(host)) {\n                        hostObj[host] = {\n                            summary: new HostSummary(),\n                            waterfall: new HostWaterfall()\n                        };\n                    }\n                    var h = hostObj[host];\n                    var ajax = getAjaxTiming(res);\n                    if (ajax) {\n                        h.summary.addAjaxItem(ajax, res);\n                        h.waterfall.addAjaxItem(ajax, res);\n                    }\n                    else {\n                        h.summary.update(res);\n                        h.waterfall.addItem(res);\n                    }\n                }\n            }\n            var tree1 = new Tree();\n            for (var name in hostObj) {\n                var node = undefined;\n                for (var i = name.length - 1; i >= 0; i--) {\n                    var char = name[i];\n                    node = tree1.add(node, char);\n                }\n                node.data = hostObj[name].summary.translateForPost();\n            }\n            var tree2 = new Tree();\n            for (var name in hostObj) {\n                var node = undefined;\n                for (var i = name.length - 1; i >= 0; i--) {\n                    var char = name[i];\n                    node = tree2.add(node, char);\n                }\n                node.data = hostObj[name].waterfall.translateForPost();\n            }\n            var container = {\n                summary: tree1.toObject(),\n                waterfall: tree2.toObject()\n            };\n            return container;\n        };\n        PostData.prototype.filterAjaxResources = function (ajaxResources) {\n            if (config.ajaxDomains === \"\" || config.ajaxDomains === undefined) {\n                return ajaxResources;\n            }\n            // Returns the host with subdomain from the url\n            var getHostNameWithSubdomain = function (url) {\n                var regex = /^(?:https?:\\/\\/)?(?:[^@\\/\\n]+@)?(?:www\\.)?([^:\\/?\\n]+)/;\n                var output = regex.exec(url);\n                if (output !== null) {\n                    return output[1];\n                }\n            };\n            // Returns the host without subdomain from the url\n            var getHostNameWithoutSubdomain = function (url) {\n                var regex = /([a-z\\-0-9]{2,63})\\.([a-z\\.]{2,5})$/;\n                var urlParts = regex.exec(url);\n                return urlParts && urlParts[0];\n            };\n            // Returns the url with protocal \n            var getFullUrl = function (url) {\n                var regex = /(http|https)?:\\/\\/(\\S+)/g;\n                var hasSchema = regex.test(url);\n                return hasSchema ? url : \"https://\".concat(url);\n            };\n            var filterAjaxDomainsList = config.ajaxDomains.split(',');\n            var filteredAjaxResources = ajaxResources.filter(function (resource) {\n                var resourceWithSubdomain = getHostNameWithSubdomain(resource.url);\n                var resourceUrl = getFullUrl(resource.url);\n                var resourceHostName = new URL(resourceUrl).host;\n                var resourceWithoutSubdomain = getHostNameWithoutSubdomain(resourceHostName);\n                var result = filterAjaxDomainsList.some(function (domain) {\n                    var domainUrl = getFullUrl(domain);\n                    var filterHostName = new URL(domainUrl).host;\n                    var filterDomainWithSubdomain = filterHostName.replace('www.', '');\n                    var filterDomainWithoutSubdomain = getHostNameWithoutSubdomain(filterHostName);\n                    var hasFilterSubdomain = filterDomainWithSubdomain !== filterDomainWithoutSubdomain;\n                    if (hasFilterSubdomain) {\n                        return filterDomainWithSubdomain === resourceWithSubdomain;\n                    }\n                    else {\n                        return resourceWithoutSubdomain === filterDomainWithoutSubdomain;\n                    }\n                });\n                return result;\n            });\n            return filteredAjaxResources;\n        };\n        return PostData;\n    }(DataWrapper_1.default));\n    var DataProvider = /** @class */ (function () {\n        function DataProvider() {\n            var _this = this;\n            this.visitor = new Visitor();\n            this.postUrl = config.postUrl;\n            this.didSendInitial = false;\n            this.isDebugging = false;\n            this.countResourcesSent = 0;\n            this.didSoftNavigation = false;\n            this.currentUrl = '';\n            this.softNavigationStart = 0;\n            // limit to protect us from processing very large numbers of performance marks that the client\n            // may have added to their page.\n            this.MaxNumberOfPerformanceMarks = 1000;\n            this.updatePerformanceMetrics = function (postObj) {\n                var timing = Util.getNavigationTime();\n                if (!timing) {\n                    return;\n                }\n                var navigationtiming = timing;\n                var navStart = Util.getNavigationStart(timing);\n                var domLoading = navigationtiming.loadEventEnd;\n                var allowOrigin = timing.responseStart;\n                postObj.dns = allowOrigin ? timing.domainLookupEnd - timing.domainLookupStart : null;\n                postObj.fullConnect = allowOrigin ? timing.connectEnd - timing.connectStart : null;\n                postObj.wait = allowOrigin ? timing.responseStart - timing.requestStart : null;\n                postObj.load = allowOrigin ? timing.responseEnd - timing.responseStart : null;\n                postObj.domInteractive = Util.getMetricValue(timing.domInteractive, navStart);\n                postObj.domLoaded = Util.getMetricValue(timing.domContentLoadedEventStart, navStart);\n                postObj.docComplete = Util.getMetricValue(timing.domComplete, navStart);\n                postObj.response = Util.getMetricValue(timing.responseEnd, navStart);\n                postObj.contentLoad = Util.getMetricValue(timing.loadEventStart, domLoading);\n                postObj.redirect = timing.redirectEnd - timing.redirectStart;\n                if (timing[\"secureConnectionStart\"]) {\n                    postObj.secureConnect = timing.connectEnd - timing[\"secureConnectionStart\"];\n                }\n            };\n            this.updateResources = function (ev, postObj) {\n                if (hasPerformanceApi) {\n                    var arr = [];\n                    if (hasGetEntriesApi) {\n                        arr = pageWindow.performance.getEntriesByType(\"resource\");\n                    }\n                    if (ev != types_1.PostType.OnLoad) {\n                        _this.setClearResources();\n                        if (config.clearResources && pageWindow.performance.clearResourceTimings) {\n                            postObj.resources = arr;\n                            pageWindow.performance.clearResourceTimings();\n                        }\n                        else {\n                            postObj.resources = arr.slice(_this.countResourcesSent);\n                            _this.countResourcesSent = arr.length;\n                        }\n                    }\n                }\n            };\n            this.getTimeOnPage = function (isSoftNavigation) {\n                var focusAwayTime = _this.getFocusAwayTime();\n                var navigationStart = _this.getNavigationStart(isSoftNavigation);\n                var timeOnPage = now() - navigationStart - focusAwayTime;\n                return timeOnPage;\n            };\n            this.getVisuallyComplete = function (isSoftNavigation) {\n                if (pageWindow[\"CPVisuallyComplete\"]) {\n                    var val = pageWindow[\"CPVisuallyComplete\"].getValue(isSoftNavigation);\n                    if (typeof val == \"number\" && val >= 0) {\n                        return val;\n                    }\n                }\n            };\n            this.updateEngagementMetrics = function (postObj, isSoftNavigation) {\n                if (hasGetEntriesApi) {\n                    var paintTimings = pageWindow.performance.getEntriesByType('paint');\n                    if (paintTimings && paintTimings.length > 0) {\n                        postObj.firstPaint = _this.getPaintTimings(paintTimings, 'first-paint');\n                        postObj.firstContentPaint = _this.getPaintTimings(paintTimings, 'first-contentful-paint');\n                    }\n                }\n                var timing = Util.getNavigationTime();\n                if (timing) {\n                    var navStart = Util.getNavigationStart(timing);\n                    var contentLoadEnd = Util.getMetricValue(timing.domContentLoadedEventEnd, navStart);\n                    var timeToInteract = performanceObserver.getLongTaskTime();\n                    if (isSoftNavigation) {\n                        // For soft navigation when there are no long tasks captured, post visually complate as TTI.\n                        postObj.timeToInteract = timeToInteract || _this.getVisuallyComplete(isSoftNavigation);\n                    }\n                    else {\n                        postObj.timeToInteract = contentLoadEnd && contentLoadEnd < timeToInteract ? timeToInteract : contentLoadEnd;\n                    }\n                }\n                if (profiler.getEventTimingHandler) {\n                    postObj.engagementTime = profiler.getEventTimingHandler().getEngagementTime();\n                    postObj.timeOnPage = _this.getTimeOnPage(isSoftNavigation);\n                    postObj.firstEngagementTime = _this.getFirstEngagementTime(isSoftNavigation);\n                }\n                if (profiler.getInputDelay) {\n                    postObj.firstInputDelay = profiler.getInputDelay().getFirstInputDelay();\n                }\n            };\n            this.getFirstEngagementTime = function (isSoftNavigation) {\n                var navigationStart = _this.getNavigationStart(isSoftNavigation);\n                var engagementStartTime = profiler.getEventTimingHandler().getFirstEngagementTime();\n                if (engagementStartTime && navigationStart) {\n                    var firstEngagementTime = engagementStartTime - navigationStart;\n                    return firstEngagementTime;\n                }\n                return 0;\n            };\n            this.getNavigationStart = function (isSoftNavigation) {\n                var navigationStart = profiler.getEventTimingHandler &&\n                    typeof profiler.getEventTimingHandler === 'function' &&\n                    profiler.getEventTimingHandler().getStartTime &&\n                    typeof profiler.getEventTimingHandler().getStartTime === 'function' ? profiler.getEventTimingHandler().getStartTime() : 0;\n                return isSoftNavigation ? _this.softNavigationStart : navigationStart;\n            };\n            this.getElapsedTimeSinceLatestNavStart = function () {\n                var navStart = profiler.data.start;\n                if (_this.didSoftNavigation && navStart) {\n                    return _this.softNavigationStart - navStart;\n                }\n                else {\n                    return 0;\n                }\n            };\n            this.getFocusAwayTime = function () {\n                return profiler.getEventTimingHandler().getFocusAwayTime() || 0;\n            };\n            this.updateDebugData = function () {\n                var postObj = _this.createInitPostObject(types_1.PostType.OnBeforeUnload, false);\n                var sendWaterfall = _this.visitor.store.sendWaterfall || !!Util.getQueryStringValue(config.waterfallParameter);\n                var dataStr = postObj.toString(types_1.PostType.OnLoad, sendWaterfall);\n                profiler[\"debugData\"] = postObj;\n                profiler[\"unloadDebugData\"] = dataStr;\n            };\n            this.onPageLoad = function () {\n                if (_this.isDebugging) {\n                    profiler[\"debugData\"] = _this.createInitPostObject(types_1.PostType.OnLoad, false);\n                    profiler[\"updateDebugData\"] = _this.updateDebugData;\n                    profiler[\"sendData\"] = function () { _this.doPost(types_1.PostType.OnBeforeUnload, false); };\n                    Util.stopEvents();\n                    Util.addScriptTag(config.debugUrl, pageWindow);\n                    return;\n                }\n                _this.visitor.updateSessionTime();\n                _this.doPost(types_1.PostType.OnLoad, false);\n            };\n            this.captureSoftNavigations = function () {\n                profiler.eventManager.add(\"hashchange\", pageWindow, _this.onSoftNavigation);\n                var history = pageWindow.history;\n                if (!history) {\n                    return;\n                }\n                var functionStr = \"function\";\n                if (typeof history.go === functionStr) {\n                    var origGo_1 = history.go;\n                    history.go = function (delta) {\n                        _this.onSoftNavigation();\n                        origGo_1.call(history, delta);\n                    };\n                }\n                if (typeof history.back === functionStr) {\n                    var origBack_1 = history.back;\n                    history.back = function () {\n                        _this.onSoftNavigation();\n                        origBack_1.call(history);\n                    };\n                }\n                if (typeof history.forward === functionStr) {\n                    var origForward_1 = history.forward;\n                    history.forward = function () {\n                        _this.onSoftNavigation();\n                        origForward_1.call(history);\n                    };\n                }\n                if (typeof history.pushState === functionStr) {\n                    var origPush_1 = history.pushState;\n                    history.pushState = function (data, title, url) {\n                        _this.onSoftNavigation();\n                        origPush_1.call(history, data, title, url);\n                    };\n                }\n                if (typeof history.replaceState === functionStr) {\n                    var origReplace_1 = history.replaceState;\n                    history.replaceState = function (data, title, url) {\n                        _this.onSoftNavigation();\n                        origReplace_1.call(history, data, title, url);\n                    };\n                }\n            };\n            // @ts-ignore\n            this.onViewVisuallyComplete = function (val) {\n                if (_this.didSoftNavigation) {\n                    _this.doPost(types_1.PostType.OnLoad, true);\n                }\n            };\n            this.onSoftNavigation = function () {\n                // do not consider softnavigation when load is not fired yet .....\n                if (!profiler.data.loadFired) {\n                    return;\n                }\n                var vc;\n                if (performanceObserver) {\n                    performanceObserver = new PerformanceObserver(true);\n                }\n                if (pageWindow[\"CPVisuallyComplete\"]) {\n                    vc = pageWindow[\"CPVisuallyComplete\"];\n                    vc.onComplete(_this.onViewVisuallyComplete);\n                }\n                _this.doPost(types_1.PostType.OnBeforeUnload, _this.didSoftNavigation);\n                _this.visitor.store.viewCount++;\n                if (!!vc) {\n                    pageWindow.setTimeout(function () { vc.reset(); }, 0);\n                }\n                //Capture navigation start for each soft navigation\n                pageWindow.setTimeout(function () {\n                    _this.softNavigationStart = now();\n                    if (profiler.getEventTimingHandler) {\n                        var handler = profiler.getEventTimingHandler();\n                        var inputHandler = profiler.getInputDelay();\n                        handler.startSoftNavigationCapture();\n                        inputHandler.startSoftNavigationCapture();\n                        handler.resetSoftNavigationCapture();\n                    }\n                }, 0);\n                _this.didSoftNavigation = true;\n            };\n            this.doPost = function (type, isSoftNavigation) {\n                if (!_this.visitor.shouldPost()) {\n                    return;\n                }\n                if (type == types_1.PostType.OnBeforeUnload && !profiler.data.loadFired) {\n                    type = types_1.PostType.OnAbort;\n                }\n                var postObj;\n                if (_this.didSendInitial) {\n                    postObj = _this.createDiffPostObject(type, isSoftNavigation);\n                }\n                else {\n                    postObj = _this.createInitPostObject(type, isSoftNavigation);\n                    _this.didSendInitial = true;\n                }\n                var canSendWaterfall = _this.visitor.store.sendWaterfall || !!Util.getQueryStringValue(config.waterfallParameter);\n                var isWaterfallPost = type == types_1.PostType.OnBeforeUnload || type == types_1.PostType.OnAbort;\n                var sendWaterfall = canSendWaterfall && isWaterfallPost;\n                _this.makeRequest(type, postObj, sendWaterfall);\n            };\n            if (!profiler || !profiler.data) {\n                return;\n            }\n            var didInitVisitor = this.visitor.init();\n            this.isDebugging = !!Util.getQueryStringValue(config.debugParameter);\n            if (!this.isDebugging && !didInitVisitor) {\n                Util.stopEvents();\n                return;\n            }\n            this.captureSoftNavigations();\n            // page load event capture\n            var didLoadPost = false;\n            var loadPost = function () {\n                if (didLoadPost) {\n                    return;\n                }\n                profiler.data.loadFired = true;\n                didLoadPost = true;\n                _this.onPageLoad();\n            };\n            if (!profiler.data.loadFired && !!pageWindow.document) {\n                profiler.data.loadFired = pageWindow.document.readyState === \"complete\";\n            }\n            if (profiler.data.loadFired) {\n                loadPost();\n            }\n            else {\n                profiler.eventManager.add(windowEventDef.Load, parent.window, loadPost);\n            }\n            // need on both \"beforeunload\" and \"unload\" for cross-browser compatibility\n            var didUnloadPost = false;\n            var unloadPost = function () {\n                if (didUnloadPost) {\n                    return;\n                }\n                didUnloadPost = true;\n                _this.doPost(types_1.PostType.OnBeforeUnload, false);\n            };\n            profiler.eventManager.add(windowEventDef.BeforeUnload, pageWindow, unloadPost);\n            profiler.eventManager.add(windowEventDef.Unload, pageWindow, unloadPost);\n        }\n        DataProvider.prototype.createInitPostObject = function (ev, isSoftNavigation) {\n            var postObj = this.createBasePostObj(ev, true, isSoftNavigation);\n            this.updatePerformanceMetrics(postObj);\n            var info = this.visitor.store;\n            if (info.exitToEntry > 0) {\n                postObj.exitToEntry = info.exitToEntry;\n            }\n            var entryToLoad = profiler.data.loadTime - profiler.data.start;\n            if (entryToLoad > 0) {\n                postObj.entryToOnLoad = entryToLoad;\n            }\n            if (document[\"webkitVisibilityState\"] === \"prerender\") {\n                postObj.prerender = 1;\n            }\n            if (hasPerformanceApi) {\n                var arr = void 0;\n                if (hasGetEntriesApi) {\n                    // This is less than optimal but that's down to the API we're working with: \n                    // https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType .\n                    // We have to tell the TS compiler that we \"know\" the returned objects are in \n                    // fact PerformanceResourceTiming's.\n                    arr = pageWindow.performance.getEntriesByType(\"resource\");\n                    postObj.resources = arr;\n                }\n                if (ev != types_1.PostType.OnLoad) {\n                    this.setClearResources();\n                    if (config.clearResources && pageWindow.performance.clearResourceTimings) {\n                        pageWindow.performance.clearResourceTimings();\n                    }\n                    else {\n                        this.countResourcesSent = arr.length;\n                    }\n                }\n            }\n            return postObj;\n        };\n        DataProvider.prototype.createDiffPostObject = function (ev, isSoftNavigation) {\n            var postObj = this.createBasePostObj(ev, false, isSoftNavigation);\n            this.updateResources(ev, postObj);\n            this.updateEngagementMetrics(postObj, isSoftNavigation);\n            this.addPerformanceMarksToPostData(pageWindow.performance, postObj);\n            var visComplete = this.getVisuallyComplete(isSoftNavigation);\n            if (visComplete) {\n                postObj.visComplete = visComplete;\n            }\n            if (profiler && profiler.getCPWebVitals) {\n                var cpWebVitals = profiler.getCPWebVitals();\n                if (cpWebVitals.cls) {\n                    postObj.cls = cpWebVitals.cls;\n                }\n                if (cpWebVitals.lcp) {\n                    postObj.lcp = cpWebVitals.lcp;\n                }\n                if (cpWebVitals.inp) {\n                    postObj.inp = cpWebVitals.inp;\n                }\n            }\n            if (profiler.data.jsCount > 0) {\n                postObj.jsErrorCount = profiler.data.jsCount;\n                postObj.jsErrors = profiler.data.jsErrors;\n                profiler.clearErrors();\n            }\n            if (profiler && profiler.getAjaxRequests) {\n                var ajaxRequests = profiler.getAjaxRequests();\n                if (ajaxRequests) {\n                    postObj.ajaxRequests = ajaxRequests.slice();\n                    profiler.clearAjaxRequests();\n                }\n            }\n            return postObj;\n        };\n        DataProvider.prototype.createBasePostObj = function (ev, isNewPageView, isSoftNavigation) {\n            var postObj = new PostData();\n            postObj.postType = ev;\n            postObj.isNewPageView = isNewPageView;\n            postObj.siteId = config.siteId;\n            // We need to decode first because if the url is already encoded, it is getting double encoded\n            // Eg: if url is google.com/test%20me then encodeURI is converting to google.com/test%2520me\n            postObj.referrer = encodeURI(decodeURI(pageWindow.location.href));\n            postObj.sampleRate = config.sampleRate;\n            postObj.waterfallSampleRate = config.waterfallSampleRate;\n            var info = this.visitor.store;\n            postObj.userId = info.userId;\n            postObj.sessionId = info.sessionId;\n            postObj.pageViewId = info.pageViewId;\n            postObj.pageViewCount = info.pageViewCount;\n            postObj.viewCount = info.viewCount;\n            postObj.screenHeight = screen.height;\n            postObj.screenWidth = screen.width;\n            this.currentUrl = postObj.referrer;\n            if (ev === types_1.PostType.OnBeforeUnload || ev === types_1.PostType.OnAbort) {\n                postObj.referrer = this.currentUrl || encodeURI(decodeURI(pageWindow.location.href));\n            }\n            else {\n                postObj.referrer = encodeURI(decodeURI(pageWindow.location.href));\n            }\n            if (isSoftNavigation) {\n                postObj.isNewView = ev == types_1.PostType.OnLoad;\n            }\n            if (profiler.hasInsight) {\n                this.addInsightForPost(postObj);\n                profiler.clearInfo();\n            }\n            return postObj;\n        };\n        /**\n         * Iterate (if any) the \"mark\"'s (see https://www.w3.org/TR/user-timing/#extensions-performance-interface)\n         * that have been added to the page's Performance object. For each one, check if its one of the four standard\n         * ones that we capture. If it is, add it to the matching property in PostData. If there has been a soft\n         * navigation only capture marks that were set after it occurred.\n         * @param performance the w3.org Performance API object.\n         * @param postObj the DTO Post object we use to populate our POST to the Logger.\n         * @param isSoftNavigation true if this method is being invoked as part of a soft nav, false otherwise.\n         */\n        DataProvider.prototype.addPerformanceMarksToPostData = function (performance, postObj) {\n            if (hasPerformanceApi && performance.getEntriesByType) {\n                var marks = performance.getEntriesByType('mark');\n                if (marks && (marks.length > 0) && (marks.length < this.MaxNumberOfPerformanceMarks)) {\n                    var elapsedNavStartTime_1 = this.getElapsedTimeSinceLatestNavStart();\n                    var validMarks = marks.filter(function (x) { return (x.startTime != null) && (x.startTime >= elapsedNavStartTime_1); });\n                    for (var _i = 0, validMarks_1 = validMarks; _i < validMarks_1.length; _i++) {\n                        var mark = validMarks_1[_i];\n                        this.addMarkToPostData(mark, postObj);\n                    }\n                }\n            }\n        };\n        /**\n         * Given a performance mark (see https://www.w3.org/TR/user-timing/#extensions-performance-interface),\n         * see if it's a standard one that we're interested in. If it is, set the matching PostData property.\n         * @param mark the performance mark set on the clients' page that we're interrogating\n         * @param postObj the DTO object into which we put the mark value\n         */\n        DataProvider.prototype.addMarkToPostData = function (mark, postObj) {\n            var markTime = Util.getRoundedValue(mark.startTime + mark.duration);\n            switch (mark.name) {\n                case 'mark_fully_loaded':\n                    postObj.markFullyLoaded = markTime;\n                    break;\n                case 'mark_fully_visible':\n                    postObj.markFullyVisible = markTime;\n                    break;\n                case 'mark_above_the_fold':\n                    postObj.markAboveTheFold = markTime;\n                    break;\n                case 'mark_time_to_user_action':\n                    postObj.markTimeToUserAction = markTime;\n                    break;\n                default:\n                    break; // arriving here means it's a nonstandard mark that we don't care about\n            }\n        };\n        // @ts-ignore\n        DataProvider.prototype.getPaintTimings = function (paintTimings, type) {\n            var paintType = paintTimings.filter(function (x) { return x.name === type; });\n            if (paintType && paintType.length > 0 && paintType[0].startTime) {\n                return Math.round(paintType[0].startTime);\n            }\n        };\n        DataProvider.prototype.setClearResources = function () {\n            if (!!pageWindow[\"__cpPreventResourceClear\"]) {\n                config.clearResources = pageWindow[\"__cpPreventResourceClear\"] === false;\n            }\n        };\n        DataProvider.prototype.addInsightForPost = function (postObj) {\n            var insight = profiler.info;\n            for (var name_1 in insight) {\n                switch (name_1) {\n                    case \"appError\":\n                        var n = insight[name_1];\n                        if (n && typeof n == \"object\") {\n                            var num;\n                            for (var key in n) {\n                                num = Number(key);\n                                if (isNaN(num)) {\n                                    continue;\n                                }\n                                var tmp = n[key];\n                                if (tmp && typeof tmp == \"string\") {\n                                    var str = tmp;\n                                    if (str.length > 32) {\n                                        str = str.substring(0, 32);\n                                    }\n                                    postObj.addError(key, str);\n                                }\n                            }\n                        }\n                        break;\n                    case \"conversion\":\n                        var n = insight[name_1];\n                        postObj.isConversion = true;\n                        if (n) {\n                            if (typeof n == \"object\") {\n                                var num;\n                                for (var key in n) {\n                                    num = Number(key);\n                                    if (isNaN(num)) {\n                                        continue;\n                                    }\n                                    var tmp = n[key];\n                                    if (tmp && typeof tmp == \"number\") {\n                                        postObj.revenue = num;\n                                        postObj.revenueItems = tmp;\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case \"indicator\":\n                        var ind = this.buildInsight(insight[name_1], 0);\n                        if (ind[0]) {\n                            postObj.addIndicator(ind[1]);\n                        }\n                        break;\n                    case \"tracepoint\":\n                        var tra = this.buildInsight(insight[name_1], \"\");\n                        if (tra[0]) {\n                            postObj.addTracepoint(tra[1]);\n                        }\n                        break;\n                    case \"pageGroup\":\n                        var n = insight[name_1];\n                        if (n !== undefined && typeof n == \"string\") {\n                            postObj.pageGroup = n;\n                        }\n                        break;\n                    case \"variation\":\n                        var n = insight[name_1];\n                        if (n !== undefined && typeof n == \"string\") {\n                            postObj.variation = n;\n                        }\n                        break;\n                }\n            }\n        };\n        DataProvider.prototype.buildInsight = function (insight, expected) {\n            var obj = {};\n            var ret = false;\n            if (insight && typeof insight == \"object\") {\n                for (var key in insight) {\n                    if (key) {\n                        var n = insight[key];\n                        if (n != null && typeof n == typeof expected) {\n                            obj[key] = n;\n                            ret = true;\n                        }\n                    }\n                }\n            }\n            if (!ret) {\n                return [ret, obj];\n            }\n            return [ret, obj];\n        };\n        DataProvider.prototype.makeRequest = function (type, postObj, sendWaterfall) {\n            var dataStr = postObj.toString(type, sendWaterfall);\n            if (pageWindow.navigator && typeof pageWindow.navigator[\"sendBeacon\"] == \"function\") {\n                pageWindow.navigator[\"sendBeacon\"](this.postUrl, dataStr);\n            }\n            else {\n                var request = new XMLHttpRequest();\n                if (window.XDomainRequest) {\n                    request = new window.XDomainRequest();\n                    //Set all the fields so that the request can be made succesfully\n                    request.timeout = 0;\n                    request.onload = function () { };\n                    request.onerror = function () { };\n                    request.ontimeout = function () { };\n                    request.onprogress = function () { };\n                }\n                request.open(\"POST\", this.postUrl, false);\n                request.setRequestHeader ? request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8') : null;\n                request.send(dataStr);\n                request = null;\n            }\n        };\n        return DataProvider;\n    }());\n    // @ts-ignore\n    var provider = new DataProvider();\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/main.ts\n");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PostType = exports.VisibilityType = exports.WindowEvent = void 0;\nvar WindowEvent;\n(function (WindowEvent) {\n    WindowEvent[\"Load\"] = \"load\";\n    WindowEvent[\"BeforeUnload\"] = \"beforeunload\";\n    WindowEvent[\"Abort\"] = \"abort\";\n    WindowEvent[\"Error\"] = \"error\";\n    WindowEvent[\"Unload\"] = \"unload\";\n})(WindowEvent || (exports.WindowEvent = WindowEvent = {}));\nvar VisibilityType;\n(function (VisibilityType) {\n    VisibilityType[VisibilityType[\"Focus\"] = 0] = \"Focus\";\n    VisibilityType[VisibilityType[\"Blur\"] = 1] = \"Blur\";\n})(VisibilityType || (exports.VisibilityType = VisibilityType = {}));\n;\n// enum definition matches core enum\nvar PostType;\n(function (PostType) {\n    PostType[PostType[\"OnLoad\"] = 0] = \"OnLoad\";\n    PostType[PostType[\"OnBeforeUnload\"] = 1] = \"OnBeforeUnload\";\n    PostType[PostType[\"OnAbort\"] = 2] = \"OnAbort\";\n    PostType[PostType[\"Flush\"] = 3] = \"Flush\";\n})(PostType || (exports.PostType = PostType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdHlwZXMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBU0EsSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ25CLDRCQUFhO0lBQ2IsNENBQTZCO0lBQzdCLDhCQUFlO0lBQ2YsOEJBQWU7SUFDZixnQ0FBaUI7QUFDckIsQ0FBQyxFQU5XLFdBQVcsMkJBQVgsV0FBVyxRQU10QjtBQUVELElBQVksY0FHWDtBQUhELFdBQVksY0FBYztJQUN0QixxREFBSztJQUNMLG1EQUFJO0FBQ1IsQ0FBQyxFQUhXLGNBQWMsOEJBQWQsY0FBYyxRQUd6QjtBQUFBLENBQUM7QUEwQkYsb0NBQW9DO0FBQ3BDLElBQVksUUFLWDtBQUxELFdBQVksUUFBUTtJQUNoQiwyQ0FBVTtJQUNWLDJEQUFrQjtJQUNsQiw2Q0FBVztJQUNYLHlDQUFTO0FBQ2IsQ0FBQyxFQUxXLFFBQVEsd0JBQVIsUUFBUSxRQUtuQiIsInNvdXJjZXMiOlsid2VicGFjazovL0NhdGNoUG9pbnQuSGF3ay5Gcm9udEVuZC5KYXZhU2NyaXB0UHJvdmlkZXIuTGlicmFyeS8uL3NyYy90eXBlcy50cz9hNzZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9maWxlckpzRXJyb3IgZnJvbSBcIi4vcnByb2ZpbGVyL1Byb2ZpbGVySnNFcnJvclwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgLy8gSUUgc3BlY2lmaWNcclxuICAgIGF0dGFjaEV2ZW50KGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyKTogYm9vbGVhbjtcclxuICAgIGRldGFjaEV2ZW50KGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyKTogdm9pZDtcclxuICAgIEN1c3RvbUV2ZW50KGV2ZW50OiBzdHJpbmcsIHBhcmFtczogYW55KTogQ3VzdG9tRXZlbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFdpbmRvd0V2ZW50IHtcclxuICAgIExvYWQgPSBcImxvYWRcIixcclxuICAgIEJlZm9yZVVubG9hZCA9IFwiYmVmb3JldW5sb2FkXCIsXHJcbiAgICBBYm9ydCA9IFwiYWJvcnRcIixcclxuICAgIEVycm9yID0gXCJlcnJvclwiLFxyXG4gICAgVW5sb2FkID0gXCJ1bmxvYWRcIlxyXG59XHJcblxyXG5leHBvcnQgZW51bSBWaXNpYmlsaXR5VHlwZSB7XHJcbiAgICBGb2N1cyxcclxuICAgIEJsdXJcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmlzaWJpbGl0eUV2ZW50IHtcclxuICAgIHR5cGU6IFZpc2liaWxpdHlUeXBlO1xyXG4gICAgdGltZTogbnVtYmVyXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBQcm9maWxlckRhdGEge1xyXG4gICAgc3RhcnQ6IG51bWJlcjtcclxuICAgIGpzQ291bnQ6IG51bWJlcjtcclxuICAgIGpzRXJyb3JzOiBQcm9maWxlckpzRXJyb3JbXTtcclxuICAgIGxvYWRUaW1lOiBudW1iZXI7XHJcbiAgICBsb2FkRmlyZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ1BXZWJWaXRhbHMge1xyXG4gICAgY2xzOiBudW1iZXI7XHJcbiAgICBsY3A6IG51bWJlcjtcclxuICAgIGlucDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByb2ZpbGVyRXZlbnQge1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgdGFyZ2V0OiBhbnk7XHJcbiAgICBmdW5jOiAoYW55KSA9PiBhbnk7XHJcbn1cclxuXHJcbi8vIGVudW0gZGVmaW5pdGlvbiBtYXRjaGVzIGNvcmUgZW51bVxyXG5leHBvcnQgZW51bSBQb3N0VHlwZSB7XHJcbiAgICBPbkxvYWQgPSAwLFxyXG4gICAgT25CZWZvcmVVbmxvYWQgPSAxLFxyXG4gICAgT25BYm9ydCA9IDIsXHJcbiAgICBGbHVzaCA9IDNcclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/types.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main/main.ts");
/******/ 	
/******/ })()
;
